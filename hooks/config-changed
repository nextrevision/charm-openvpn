#!/bin/bash

juju-log "Getting user defined settings"
USER=`config-get user`
PROTO=`config-get protocol`
PORT=`config-get port`
IFACE=`config-get interface`
DEVICE=`config-get device-type`
NETWORK=`config-get client-network`
ADDITIONAL_ROUTES=`config-get additional-routes`
RR_GW=`config-get reroute-gateway`
RR_DNS=`config-get reroute-dns`
DNS_SERVERS=`config-get dns-servers`

# Import shared functions and variables
juju-log "Importing shared variables and functions"
source hooks/common.sh

# Read the persistence file for previous user settings
juju-log "Reading previous settings"
if [ -f .persistence ]; then
    source .persistence
fi

# Assume the network iface is eth0 and parse the network settings
juju-log "Getting current network information from eth0"
current_network=`ip route | grep ${IFACE} | egrep -o '^([0-9]+[./]){4}[0-9]{2}'`
current_network=`parse_network ${current_network}`
public_address=`unit-get public-address`
juju-log "Parsing user supplied network"
client_network=`parse_network ${NETWORK}`

# Configure forwarding with iptables
iptables -A INPUT -i tun+ -j ACCEPT
iptables -A FORWARD -i tun+ -j ACCEPT
iptables -F -t nat

# Ensure port settings | 1-65535
juju-log "Updating port settings"
sed -r -i -e "s/port [0-9]{1,5}.*/port ${PORT}/g" $SERVER_CONF

# Ensure protocol settings | tcp/udp
juju-log "Updating protocol settings"
sed -r -i -e "s/proto (tcp|udp).*/proto ${PROTO}/g" $SERVER_CONF
sed -r -i -e "s/proto (tcp|udp).*/proto ${PROTO}/g" $CLIENT_CONF

# Ensure device type settings | tun/tap
juju-log "Updating device adapter settings"
sed -r -i -e "s/dev (tap|tun).*/dev ${DEVICE}/g" $SERVER_CONF
sed -r -i -e "s/dev (tap|tun).*/dev ${DEVICE}/g" $CLIENT_CONF

# Update client config settings
sed -r -i -e "s/^remote.*/remote ${public_address} ${PORT}/g" $CLIENT_CONF
sed -r -i "s/cert .*\.crt/cert ${USER}.crt/g" $CLIENT_CONF
sed -r -i "s/key .*\.key/key ${USER}.key/g" $CLIENT_CONF

# Ensure client network settings | server x.x.x.x x.x.x.x
juju-log "Updating client network settings"
sed -r -i -e "s/server ([0-9]{1,3}\.){3}.*/server ${client_network}/g" $SERVER_CONF

# Remove any active routes
juju-log "Removing old routes"
sed -r -i -e '/push \"route ([0-9]{1,3}\.){3}.*\"/d' $SERVER_CONF
# Add current network route
juju-log "Adding current network route"
echo "push \"route ${current_network}\"" >> $SERVER_CONF
# Add additional routes
juju-log "Adding additional, client specified routes"
if [ -n "${ADDITIONAL_ROUTES}" ]; then
	for add_net in ${ADDITIONAL_ROUTES//,/ }; do
	    network=`parse_network ${add_net}`
	    echo "push \"route ${network}\"" >> $SERVER_CONF
        iptables -t nat -A POSTROUTING -s ${NETWORK} \
	       -d $add_net -o ${IFACE} -j MASQUERADE
	done
fi

# Remove any prior GW redirect settings
juju-log "Removing redirected gateway settings"
sed -r -i -e '/push \"redirect-gateway.*\"/d' $SERVER_CONF
if [[ $RR_GW == "true" ]]; then
    # Add redirect gateway setting
    juju-log "Adding redirect gateway setting"
    echo "push \"redirect-gateway def1 bypass-dhcp\"" >> $SERVER_CONF
    iptables -t nat -A POSTROUTING -s ${NETWORK} -o ${IFACE} -j MASQUERADE
fi

# Remove any prior DNS settings
sed -r -i -e '/push \"dhcp-option DNS.*\"/d' $SERVER_CONF
if [[ $RR_DNS == "true" || $RR_GW == "true" ]]; then
    # Add DNS dhcp option setting and route DNS servers over VPN
    juju-log "Adding DNS DHCP option"
    for dns_server in ${DNS_SERVERS//,/ }; do
        echo "push \"dhcp-option DNS ${dns_server}\"" >> $SERVER_CONF
        echo "push \"route ${dns_server} 255.255.255.255\"" >> $SERVER_CONF
        iptables -t nat -A POSTROUTING -s ${NETWORK} \
           -d ${dns_server}/32 -o ${IFACE} -j MASQUERADE
    done
fi

# If the user changed, generate a user cert file
juju-log "Creating user certificate"
if ! `ls $EASY_RSA/keys/ | grep -q ${USER}`; then
    juju-log "Generating new certificate for user ${USER}"
    cd $EASY_RSA && source ./vars
    $PKITOOL $USER
    cd -
fi
cd $EASY_RSA && mkdir ${USER}_keys
cp $CLIENT_CONF keys/ca.crt keys/$USER.crt \
    keys/$USER.key keys/ta.key ${USER}_keys/
tar -czf /home/ubuntu/$USER.tgz ${USER}_keys
rm -Rf ${USER}_keys
cd -
juju-log "User certificate file ready for download"

# Restart the services
juju-log "Restarting the OpenVPN service"
hooks/stop
hooks/start

# Opening up ports
if [[ $P_PORT != $PORT || $P_PROTO != $PROTO ]]; then
  juju-log "Closing port ${P_PORT}/${P_PROTO} and opening port ${PORT}/${PROTO}"
  [ -z "${P_PORT}" ] || [ -z  "${P_PROTO}" ] || close-port $P_PORT/$P_PROTO
  open-port $PORT/$PROTO
fi

# Write persistence file
juju-log "Writing the persistence file"
echo "P_PORT=${PORT}" > .persistence
echo "P_PROTO=${PROTO}" >> .persistence
echo "P_NETWORK=${PROTO}" >> .persistence

juju-log "Finished applying changes"